{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.39.12",
    "rootNode": "3.39.12",
    "id": null,
    "odd": "docbook.odd",
    "next": "3.39.14",
    "previous": "3.39.10.22",
    "nextId": null,
    "previousId": null,
    "switchView": null,
    "content": "<!DOCTYPE html>\n<div class=\"content \"><div class=\"tei-section3\"><pb-observable data=\"3.39.12,3.39.12\" emit=\"transcription\">\n      <h2 class=\"tei-title6 title\">Configuring Annotations</h2>\n      <p class=\"tei-para\">Adding new annotation types or modifying existing ones involves the following three files within TEI Publisher or generated apps:</p>\n      <dl><dt><span class=\"tei-filename code\">templates/pages/annotate.html</span></dt><dd>\n            <p class=\"tei-para\">The HTML page for the annotation editor</p>\n          </dd><dt><span class=\"tei-filename code\">modules/annotation-config.xqm</span></dt><dd>\n            <p class=\"tei-para\">Defines how annotations are mapped to TEI</p>\n          </dd><dt><span class=\"tei-filename code\">odd/annotations.odd</span></dt><dd>\n            <p class=\"tei-para\">The ODD used to render the annotation text view. In generated apps this will live in <span class=\"tei-filename code\">resources/odd/annotations.odd</span>.</p>\n          </dd></dl>\n      <p class=\"tei-para\">Let's assume we would like to support an annotation to tag foreign language passages with the TEI <span class=\"tei-tag code\">foreign</span> element:</p>\n      <p class=\"tei-para\">First, open <span class=\"tei-filename code\">templates/pages/annotate.html</span> in eXide and locate the <span class=\"tei-tag code\">div</span> with class <span class=\"tei--element\">toolbar</span>. This contains a list of <span class=\"tei-tag code\">paper-icon-button</span> elements. Like many elements in TEI Publisher, <span class=\"tei-tag code\">paper-icon-button</span> is a webcomponent from the polymer library, which renders a button compliant with Google's material design. You could use any other button-type element here, but for consistency, let's stick with <span class=\"tei-tag code\">paper-icon-button</span>. We define our new button like this:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;paper-icon-button class=\"annotation-action toggle\" title=\"Foreign\" data-type=\"foreign\" icon=\"icons:language\" data-shortcut=\"⌘+⇧+b,ctrl+⇧+b\" disabled=\"disabled\"&gt;&lt;/paper-icon-button&gt;</pb-code-highlight>\n      <figure class=\"tei-figure2 figure\"><span class=\"tei--element\">\n          <span class=\"tei--element\">\n            <img src=\"ann-configure.png\" class=\"tei-imagedata2\" title=\"\" style=\"width: 800px; \">\n          </span>\n        </span><figcaption>Configure a new annotation type</figcaption></figure>\n      <p class=\"tei-para\">Make sure to include all the attributes shown:</p>\n      <dl><dt>class</dt><dd>\n            <p class=\"tei-para\">must at least contain <span class=\"tei--element\">annotation-action</span>. The <span class=\"tei--element\">toggle</span> indicates that this is a toggling annotation, which just switches between on and off and does not need further input. For semantic annotations you can also add <span class=\"tei--element\">authority</span>, which would trigger the authority lookup.</p>\n          </dd><dt>title</dt><dd>\n            <p class=\"tei-para\">a label to be shown when the mouse is moved over the button.</p>\n          </dd><dt>data-type</dt><dd>\n            <p class=\"tei-para\">indicates the annotation type.</p>\n          </dd><dt>icon</dt><dd>\n            <p class=\"tei-para\">the <a href=\"http://kevingleason.me/Polymer-Todo/bower_components/iron-icons/demo/index.html\" class=\"tei-link5\" target=\"\">material design icon</a> to use</p>\n          </dd><dt>data-shortcut</dt><dd>\n            <p class=\"tei-para\">an optional keyboard shortcut: here we use command-shift-b for Mac and ctrl-shift-b on windows</p>\n          </dd><dt>disabled</dt><dd>\n            <p class=\"tei-para\">initially disables the button</p>\n          </dd></dl>\n      <p class=\"tei-para\">If you reload the annotation editor in the browser, you should now see your new button. However, TEI Publisher does not yet know how to translate the new annotation into actual TEI markup. To fix this, open <span class=\"tei-filename code\">modules/annotation-config.xqm</span> and search for the function <span class=\"tei-function code\">anno:annotations</span>. This is a long switch statement with cases corresponding to the different annotation types. Add a new case to the top:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">declare function anno:annotations($type as xs:string, $properties as map(*), $content as function(*)) {\n    switch ($type)\n        case \"foreign\" return\n            &lt;foreign xmlns=\"http://www.tei-c.org/ns/1.0\"&gt;{$content()}&lt;/foreign&gt;\n    ...\n};</pb-code-highlight>\n      <p class=\"tei-para\">This will simply wrap a <span class=\"tei-tag code\">foreign</span> tag around the existing content. Note that <span class=\"tei-parameter code\">$content</span> is passed in as a function pointer, so it is important to call it as <span class=\"tei-code2 code\">$content()</span>. Also note how we need to declare the TEI namespace. Without this namespace declaration, the element would not be recognized as TEI.</p>\n      <p class=\"tei-para\">Now we can try our new annotation: select a passage, click on the button and see how the text is marked as an annotation. The color is chosen automatically. You can also check in the TEI preview pane that the annotation is correctly output as a TEI <span class=\"tei-tag code\">foreign</span> element.</p>\n      <p class=\"tei-para\">However, if you save the annotations, you'll notice that - once the annotation view refreshes - the foreign text is rendered in italics, but not marked as an annotation! To fix this, we need to modify the ODD used for rendering the annotation view.</p>\n      <p class=\"tei-para\">Open <span class=\"tei-filename code\">odd/annotations.odd</span> (named \"Annotations\"), either in eXide or the ODD editor. Add an <span class=\"tei-tag code\">elementSpec</span> for element <span class=\"tei-tag code\">foreign</span> with an inline model and a <span class=\"tei--element\">cssClass</span> containing <span class=\"tei-code2 code\">annotation annotation-foreign</span>.</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;elementSpec ident=\"foreign\" mode=\"change\"&gt;\n    &lt;model behaviour=\"inline\" cssClass=\"annotation annotation-foreign\"/&gt;\n&lt;/elementSpec&gt;</pb-code-highlight>\n      <p class=\"tei-para\">If you like, you can also keep the <span class=\"tei-tag code\">outputRendition</span>, which renders the text in italic. Key is that you declare the two <span class=\"tei-emphasis2\">annotation annotation-foreign</span> CSS classes, because those will tell TEI Publisher that the element should be treated as an annotation.</p>\n      <p class=\"tei-para\">As a general guideline, the ODD rules for annotations should produce simple inline tags. They should output the content of the element without any modification. They may use <span class=\"tei-tag code\">outputRendition</span> to change the appearance, or supply other parameters (than <span class=\"tei--element\">content</span>).</p>\n      <p class=\"tei-para\">After saving the ODD, reloading the annotation editor should properly display the <span class=\"tei-tag code\">foreign</span> as an annotation and we can start using our new annotation type.</p>\n      <p class=\"tei-para\">However, we may not be entirely happy with the simple on/off toggle: it would be much better if we could also indicate the used language in <span class=\"tei-tag code\">foreign</span>. This means we have to change our annotation from a mere toggle into one which can take an additional parameter:</p>\n      <p class=\"tei-para\">To achieve this, go back to <span class=\"tei-filename code\">templates/pages/annotate.html</span> and remove the <span class=\"tei--element\">toggle</span> class from the <span class=\"tei-tag code\">paper-icon-button</span>:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;paper-icon-button class=\"annotation-action\" title=\"Foreign\" data-type=\"foreign\" icon=\"icons:language\" data-shortcut=\"⌘+⇧+b,ctrl+⇧+b\" disabled=\"disabled\"&gt;&lt;/paper-icon-button&gt;</pb-code-highlight>\n      <p class=\"tei-para\">We would also like to provide an input field into which the user can enter the language. Scroll down to where the <span class=\"tei-tag code\">form</span> is defined and add another input on top:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;iron-form id=\"edit-form\"&gt;\n    &lt;form action=\"\"&gt;\n        &lt;paper-input class=\"annotation-form foreign\" name=\"lang\" label=\"Language\"&gt;&lt;/paper-input&gt;\n    ...\n&lt;/iron-form&gt;</pb-code-highlight>\n      <p class=\"tei-para\">Again we're using a webcomponent for the input to get the material design look and feel. The class attribute is particularly important: it must always contain <span class=\"tei--element\">annotation-form</span>, followed by the annotation type: <span class=\"tei--element\">foreign</span>. The name is arbitrary, but should be unique and we need to remember it for later. The label should contain a short title, which will be shown next to the input.</p>\n      <p class=\"tei-para\">Finally, we need to change our rule in <span class=\"tei-filename code\">modules/annotation-config.xqm</span> to add the new parameter to the generated <span class=\"tei-tag code\">foreign</span> element. Navigate to the file and change the <span class=\"tei-function code\">anno:annotations</span> function as follows:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">declare function anno:annotations($type as xs:string, $properties as map(*), $content as function(*)) {\n    switch ($type)\n        case \"foreign\" return\n            &lt;foreign xmlns=\"http://www.tei-c.org/ns/1.0\" xml:lang=\"{$properties?lang}\"&gt;{$content()}&lt;/foreign&gt;\n    ...\n};</pb-code-highlight>\n      <p class=\"tei-para\">The function receives all the parameters entered into the form fields in the <span class=\"tei--element\">$properties</span> map. In the form we used <span class=\"tei-code2 code\">name=\"lang\"</span>, so the corresponding value is retrieved from the map with <span class=\"tei-code2 code\">$properties?lang</span>.</p>\n      <p class=\"tei-para\">That's all. You should now be able to modify your existing foreign annotation, enter a language and see how it is output into TEI.</p>\n      \n    </pb-observable></div></div>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}