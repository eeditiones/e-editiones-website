{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.17",
    "rootNode": "3.17",
    "id": "api",
    "odd": "docbook.odd",
    "next": "3.17.13",
    "previous": "3.15.19",
    "nextId": "api-advantages",
    "previousId": "alignment",
    "switchView": null,
    "content": "<!DOCTYPE html>\n<div class=\"content \"><div class=\"tei-section3\" id=\"api\"><pb-observable data=\"3.17,3.17\" emit=\"transcription\"><h1 class=\"tei-title6 title\">Server-side API</h1><p class=\"tei-para\">\n      Many of the user interface web components need to communicate with the server to request\n        certain data to be retrieved, processed and returned before the client-side components can\n        display it to the user. For example, when user clicks the\n      <span class=\"tei-guibutton guibutton\">Table of\n          Contents</span>\n      button, the corresponding\n      <span class=\"tei-parameter code\">pb-load</span>\n      component\n        sends an ajax request to retrieve the list of chapters. Similarly, when user types something\n        in the autocomplete field, a request is sent after each keystroke to find matching terms in\n        the index. These requests need to be received and processed by the server with the eXist\n        instance running and only then data will be returned to the browser.\n    </p><p class=\"tei-para\">\n      Previous versions of the TEI Publisher included a number of XQuery modules implementing\n        the server-side functionality, located in\n      <span class=\"tei-parameter code\">modules</span>\n      collection. In\n        version 7, a new approach has been introduced. Formal\n      <a href=\"../api.html\" class=\"tei-link4\" target=\"_new\">API specification</a>\n      , based on the\n      <a href=\"http://spec.openapis.org/oas/v3.0.3\" class=\"tei-link4\" target=\"_new\">Open API standard</a>\n      defines all the\n        server-side API endpoints available in Publisher.\n    </p><p class=\"tei-para\">The image below presents a section of the API handling all ODD-related operations:\n        creating, retrieving, updating, deleting, recompiling; syntax check for a code fragment\n        (lint); retrieving a list of all available ODDs.</p><figure class=\"tei-figure2 figure\"><span class=\"tei--element\">\n        <span class=\"tei--element\">\n          <img src=\"api-spec.png\" class=\"tei-imagedata2\" title=\"\" style=\"width: 900px; \">\n        </span>\n      </span><figcaption>TEI Publisher API page - the odd endpoint</figcaption></figure></pb-observable></div></div>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}