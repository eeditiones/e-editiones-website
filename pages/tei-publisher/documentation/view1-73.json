{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.16.19",
    "rootNode": "3.16.19",
    "id": "alignment",
    "odd": "docbook.odd",
    "next": "3.18",
    "previous": "3.16.17",
    "nextId": "api",
    "previousId": "customizing-page-template",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"alignment\"><pb-observable data=\"3.16.19,3.16.19\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Handling Complex Alignments</h2>\n      <p class=\"tei-para\">\n        It is often desirable to show two or more views of a document at the same time, for\n          example to display the translation aligned with a given source fragment. In the simplest\n          case, the transcription and translation may be aligned on the level of divisions or page\n          breaks and one can simply use two\n        <span class=\"tei-tag code\">pb-view</span>\n        referencing different starting points\n          in the TEI document (this approach is implemented by the\n        <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/templates/pages/translation.html\">translation.html<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span>\n        template for Serafin's letter).\n      </p>\n      <p class=\"tei-para\">Unfortunately things are not always as simple as that. For example, even if the\n          transcription contains page breaks or milestones which can be used to display a single\n          page, the translation might not. One thus needs a different approach to compute the\n          alignment between fragments. Nevertheless, the logic of the alignment algorithm will\n          highly depend on the conventions used in the encoding. TEI allows a wide variety of\n          alignment mechanisms and we do not want to limit the freedom of the editor by prescribing\n          a particular method.</p>\n      <p class=\"tei-para\">TEI Publisher thus implements a generic way to plug an XQuery function into the\n          processing pipeline. The function takes the source element being processed as input and\n          may replace it by its aligned equivalent. Such an equivalent may be another element or\n          fragment from the same or a different document. The source element will usually point to\n          the part of the transcription being displayed. The mapping function uses this as starting\n          point to determine an aligned fragment and returns it. The returned fragment will then be\n          further passed through the processing model.</p>\n      <p class=\"tei-para\">\n        The XQuery mapping function should be defined in the module\n        <span class=\"tei-filename code\">modules/map.xql</span>\n        . It takes an element as its only argument and may\n          return any valid TEI fragment, which will become the input for futher processing through\n          the processing model.\n      </p>\n      <p class=\"tei-para\">\n        The local name of the mapping function can then be supplied in the attribute\n        <span class=\"tei-parameter code\">map</span>\n        of\n        <span class=\"tei-tag code\">pb-view</span>\n        . As an illustration, the Van Gogh\n          example includes the following\n        <span class=\"tei-code2 code\">pb-view</span>\n        for displaying the translation:\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xquery\" line-numbers=\"line-numbers\">&lt;pb-view src=\"document1\" map=\"vg-translation\" xpath=\"//div[@type='original']\"\n    subscribe=\"transcription\"/&gt;</pb-code-highlight>\n      <p class=\"tei-para\">\n        In the Van Gogh letters, the translation contains page breaks corresponding to page\n          breaks in the original letter, but these are using a different prefix for the\n        <span class=\"tei-code2 code\">xml:id</span>\n        . To align the translation with the transcription, we only need to\n          adjust the id, and retrieve the corresponding page break to be done. The XQuery mapping\n          function is thus rather simple:\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xquery\" line-numbers=\"line-numbers\">declare function mapping:vg-translation($root as element()) {\n    let $id := ``[pb-trans-`{$root/@f}`-`{$root/@n}`]``\n    let $node := root($root)/id($id)\n    return\n        $node\n};</pb-code-highlight>\n      <p class=\"tei-para\">\n        Note that returning the corresponding\n        <span class=\"tei-tag code\">pb</span>\n        node of the translation is\n          sufficient here as further processing will automatically extract the page fragment up to\n          the next\n        <span class=\"tei-tag code\">pb</span>\n        . More complex cases may require that mapping function returns\n          arbitrary TEI fragment. Also note that the\n        <span class=\"tei-parameter code\">xpath</span>\n        attribute of the\n        <span class=\"tei-tag code\">pb-view</span>\n        element in the template must still point to the source transcription\n            (\n        <span class=\"tei-parameter code\">div[@type='original']</span>\n        in this case). It's just the mapping\n          function which translates a position in the source transcription to a corresponding\n          fragment in the translation.\n      </p>\n      <p class=\"tei-para\">The letter by Cortez to Dantiscus sent from Mexico demonstrates a much more\n          sophisticated alignment, determining the translation fragment to be shown by inspecting\n          the ID range of the transcription. It illustrates the case where no milestone elements\n          exist in the translation to explicitly mark page boundaries of the original, thus mapping\n          algorithm aims to display closest corresponding fragment of the translated text.</p>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}