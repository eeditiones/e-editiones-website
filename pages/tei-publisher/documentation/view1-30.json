{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.10.17.9",
    "rootNode": "3.10.17.9",
    "id": "docx-intro",
    "odd": "docbook.odd",
    "next": "3.10.17.11",
    "previous": "3.10.17",
    "nextId": "docx-functions",
    "previousId": "docx",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"docx-intro\"><pb-observable data=\"3.10.17.9,3.10.17.9\" emit=\"transcription\">\n        <h3 class=\"tei-title7 title\">A word about Word</h3>\n\n        <p class=\"tei-para\"> A Word document is essentially a zip archive of several different XML files. These\n          files store various parts - the text content, styles, embedded media files etc.\n          Information most relevant for the import process have been extracted into a map, which is\n          passed as a parameter to the ODD, so it is available for every element. Thus information\n          about numbering styles can be accessed via <span class=\"tei-code2 code\">$parameters?nstyle(.)</span> function and\n          testing if a list is bulleted could be done checking the value of <span class=\"tei-code2 code\">\n            $parameters?nstyle(.)/numFmt/@w:val</span>. Full list of available functions and some\n          hints how to customize default conversion ODD are provided at the <pb-link class=\"tei-link3\" uri=\"?odd=docbook.odd&amp;view=div&amp;id=docx-functions\" xml-id=\"docx-functions\" emit=\"transcription\">end of this chapter</pb-link>. </p>\n        <figure class=\"tei-figure2 figure\"><span class=\"tei--element\">\n            <span class=\"tei--element\">\n              <img src=\"wordStructure.png\" class=\"tei-imagedata2\" title=\"\" style=\"width: 212px; \">\n            </span>\n          </span><figcaption>MS Word archive structure</figcaption></figure>\n\n        <dl><dt>Named tei:* styles</dt><dd>\n              <p class=\"tei-para\"> Named styles can be strong indicators for the semantics of the text fragment.\n                Styles whose name starts with <span class=\"tei-code2 code\">tei:</span> are thus recognized as TEI elements\n                with the same name. If a character sequence uses a style called\n                  <span class=\"tei-code2 code\">tei:persName</span>, it will be wrapped into a TEI <span class=\"tei-tag code\">persName</span>\n                element in the output, e.g. <span class=\"tei-code2 code\">&lt;persName&gt;Johann Wolfgang\n                  Goethe&lt;/persName&gt;</span>. A place name should be marked with a style <span class=\"tei-code2 code\">\n                  tei:placeName</span> and reconstructed text could be encoded by applying a style\n                  <span class=\"tei-code2 code\"> tei:supplied</span>. </p>\n            </dd><dt>Headings and divisions</dt><dd>\n              <p class=\"tei-para\"> Since Word does not have a concept for text division, instead storing just flat\n                lists of paragraphs, so the only way to reconstruct the logical structure is to use\n                Word headings and outline level associated with these to determine division\n                boundaries. </p>\n              <p class=\"tei-para\"> In the first pass, all paragraph styles starting with <span class=\"tei-code2 code\">heading</span>,\n                  <span class=\"tei-code2 code\"> title</span> or <span class=\"tei-code2 code\">subtitle</span> generate a <span class=\"tei-tag code\">tei:head</span>\n                element. The outline level assigned to the heading is recorded as well. </p>\n              <p class=\"tei-para\"> Subsequently, in a second pass through the generated output, divisions are\n                generated based on the outline level: a <span class=\"tei-tag code\">div</span> spans all text from the\n                heading to the next heading on the same outline level and the process is repeated\n                for all headings within the division on a lower outline level. </p>\n            </dd><dt>Lists</dt><dd>\n              <p class=\"tei-para\"> Lists structure needs to be reconstructed, very much like divisions, taking\n                into consideration the list level associated with every item which can be accessed\n                via a call to <span class=\"tei-code2 code\">$parameters?pstyle(.)//outlineLvl/@w:val</span>. </p>\n            </dd><dt> Foot- and endnotes</dt><dd>\n              <p class=\"tei-para\"> Footnotes are translated into TEI note elements. Endnotes are also supported\n                and transformed into <span class=\"tei-code2 code\">&lt;note type=\"endnote\"&gt;</span>. </p>\n            </dd><dt>Tables</dt><dd>\n              <p class=\"tei-para\"> Processing of simple tables works very well as well as cells spanning multiple\n                colums. Row spans are not implemented yet. </p>\n            </dd><dt>Images</dt><dd>\n              <p class=\"tei-para\"> Embedded images are stored into a subcollection starting with the name of the\n                docx file being processed and suffixed with <span class=\"tei-code2 code\">.media</span>, eg.\n                  <span class=\"tei-code2 code\">&lt;graphic url=\"test.docx.media/image1.png\"/&gt;</span>\n              </p>\n            </dd></dl>\n      </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}