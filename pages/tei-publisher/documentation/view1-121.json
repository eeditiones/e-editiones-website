{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.36",
    "rootNode": "3.36",
    "id": "new-vocabulary",
    "odd": "docbook.odd",
    "next": "3.36.17",
    "previous": "3.34.33",
    "nextId": "new-vocabulary-odd",
    "previousId": "custom-components-using",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"new-vocabulary\"><pb-observable data=\"3.36,3.36\" emit=\"transcription\"><h1 class=\"tei-title7 title\">Adding a custom vocabulary</h1><p class=\"tei-para\">As discussed in the opening chapter, publishing a corpus of documents online is much\n        more than just transforming a single source document into the desired output format. To\n        fully support a new XML vocabulary in TEI Publisher several aspects need to be\n        adressed:</p><ul class=\"tei-itemizedlist\"><li class=\"tei-listitem\">\n        <p class=\"tei-para\">ODD with processing models</p>\n      </li><li class=\"tei-listitem\">\n        <p class=\"tei-para\">default view and page template</p>\n      </li><li class=\"tei-listitem\">\n        <p class=\"tei-para\">navigation, breadcrumbs and table of contents</p>\n      </li><li class=\"tei-listitem\">\n        <p class=\"tei-para\">search and filtering: full text index definitions, facets and fields</p>\n      </li></ul><p class=\"tei-para\">ODD and processing models within it govern how the document in your new vocabulary will\n        be transformed into a range of available output formats: HTML, ePub etc.</p><p class=\"tei-para\">\n      All other aspects are interconnected and depend on the understanding what constitutes\n        the basic unit of the text: TEI primarily considers\n      <span class=\"tei-emphasis2\">divisions</span>\n      or\n      <span class=\"tei-emphasis2\">pages</span>\n      , DocBook rather\n      <span class=\"tei-emphasis2\">sections</span>\n      . Therefore\n        navigation for TEI document will be switching between\n      <span class=\"tei-tag code\">div</span>\n      s or reconstructed XML\n        fragments between subsequent\n      <span class=\"tei-tag code\">pb</span>\n      s, while talking about pages in DocBook documents\n        makes no sense and\n      <span class=\"tei-tag code\">section</span>\n      s are the main structural units.\n    </p><p class=\"tei-para\">\n      This structure has its consequences for further aspects: generating TOC in TEI will\n        analyze nested\n      <span class=\"tei-tag code\">div</span>\n      /\n      <span class=\"tei-tag code\">head</span>\n      structures but only\n      <span class=\"tei-tag code\">section</span>\n      /\n      <span class=\"tei-tag code\">title</span>\n      in DocBook. Likewise, KWIC display in TEI will be\n        showing matches in\n      <span class=\"tei-tag code\">div</span>\n      context but\n      <span class=\"tei-tag code\">section</span>\n      in DocBook, so Lucene\n        indexes need to be defined on these elements in their appropriate namespaces. Ditto for\n        facets and fields used for sorting and filtering.\n    </p><p class=\"tei-para\">Sections below will explain where and how to customize these aspects in more\n        detail.</p></pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}