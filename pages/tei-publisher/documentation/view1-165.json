{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.44.21",
    "rootNode": "3.44.21",
    "id": "register-customize",
    "odd": "docbook.odd",
    "next": "3.46",
    "previous": "3.44.19.17",
    "nextId": "production",
    "previousId": "register-edit",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"register-customize\"><pb-observable data=\"3.44.21,3.44.21\" emit=\"transcription\">\n    <h2 class=\"tei-title7 title\">Customizing local registers</h2>\n    <p class=\"tei-para\">Each project may have particular needs in terms what kinds of registers it needs and the exact \n      microstructure the registry entries need to have. Therefore TEI Publisher proposes a modular approach \n      to the subject, which allows for customizations of all aspects. Nevertheless there are several conceptual blocks \n      which need careful orchestration to smoothly work together. Namely, a place to store each of the registers, \n      the data model for individual entry, the data model and source code for the input form, as well as the API endpoints \n      and corresponding functions for all CRUD (create, read, update, delete) operations on the register, and, last but not least, \n      the hooks in the annotation template to enable all this to the user.</p>\n      <div class=\"tei-note3 note\"><p class=\"tei-para\">When creating a custom app with the TEI Publisher the <span class=\"tei-code2 code\">data/registers</span> collection will \n        be included in the generated application. Nevertheless it is strongly recommended to move registers and other \n        application data to a separate package, as discussed in <pb-link class=\"tei-link3\" uri=\"?odd=docbook.odd&amp;view=div&amp;id=data-organization\" xml-id=\"data-organization\" emit=\"transcription\">data-organization chapter</pb-link>.</p></div>\n      <p class=\"tei-para\">The API endpoints for registers customization start with <span class=\"tei-code2 code\">/api/register</span> and call a set of functions from \n        <span class=\"tei-code2 code\">modules/registers.xql</span>, which can be customized to reflect differences in the data \n        coming from external authority and local entry structures.</p>\n      <p class=\"tei-para\">As mentioned before, location of the registers is determined via <span class=\"tei-code2 code\">$config:register-root</span> variable in <span class=\"tei-code2 code\">config.xqm</span>. \n        In the same module there are further customization options related to registers: location of the models for the input forms \n        (in <span class=\"tei-code2 code\">$config:register-forms</span>) and dedicated configuration for each of the editable register types.</p>\n        <p class=\"tei-para\">The actual forms themselves are located in <span class=\"tei-code2 code\">templates/pages/annotations</span> as they are effectively \n          HTML files with embedded <a href=\"https://jinntec.github.io/Fore/doc/index.html\" class=\"tei-link4\" target=\"_new\">Fore</a> form webcomponents. Please consult Fore <a href=\"https://jinntec.github.io/fore-docs\" class=\"tei-link4\" target=\"_new\">documentation</a> how to customize these.</p>\n        <figure class=\"tei-figure2 figure\"><span class=\"tei--element\">\n            <span class=\"tei--element\">\n              <img src=\"register-config.png\" class=\"tei-imagedata2\" title=\"\" style=\"width: 800px; \">\n            </span>\n          </span><figcaption>Register configuration in config.xqm</figcaption></figure>\n        <p class=\"tei-para\">The <span class=\"tei-code2 code\">$config:register-map</span> allows to determine the following information for each registry:</p>\n        <ol class=\"tei-orderedlist\"><li class=\"tei-listitem\">\n            <p class=\"tei-para\"><span class=\"tei-code2 code\">id</span>: identifier by which the registry can be reached in the database, either to access \n              information about existing entry or to determine the insertion point for a new one; e.g. for \n              the <span class=\"tei-emphasis2\">person</span> registry it is by default set to <span class=\"tei-code2 code\">pb-person</span> which is the @xml:id attribute of the TEI element in\n            <span class=\"tei-code2 code\">data/registers/persons.xml</span></p>\n            <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\">&lt;TEI xmlns=\"http://www.tei-c.org/ns/1.0\"  xml:id=\"pb-persons\"&gt;</pb-code-highlight>\n            <p class=\"tei-para\">this identifier is always resolved in the context of the <span class=\"tei-code2 code\">$config:register-root</span> variable \n              to avoid potential conflicts</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\"><span class=\"tei-code2 code\">default</span>: identifier by which the default data model for an entry can be accessed; this identifier is always resolved in the context of the <span class=\"tei-code2 code\">$config:register-forms</span></p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\"><span class=\"tei-code2 code\">prefix</span>: a prefix for the newly created entry, e.g. a new person will be given an id \n              like <span class=\"tei-code2 code\">person-00015</span> or similar, depending how many have been created locally earlier.</p>\n          </li></ol>\n  </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}