{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.20.19",
    "rootNode": "3.20.19",
    "id": "i18n-customization",
    "odd": "docbook.odd",
    "next": "3.22",
    "previous": "3.20.17.13",
    "nextId": "appgen",
    "previousId": "i18n-page-templates-properties",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"i18n-customization\"><pb-observable data=\"3.20.19,3.20.19\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Project specific i18n files</h2>\n      <p class=\"tei-para\">It is a common need that projects will need their own internationalized labels for menu\n        items, dialogs and other user interface elements.</p>\n      <p class=\"tei-para\">All these can be stored in JSON language files, following the same naming conventions\n        and basic structure as TEI Publisher ones. To use custom language files, you need to specify\n        the path under which they can be found relative to your application:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"html\">&lt;pb-page locales=\"resources/i18n/{{ns}}/{{lng}}.json\"&gt;</pb-code-highlight>\n      <p class=\"tei-para\"> The path expression requires placeholders for two parameters <span class=\"tei-parameter code\">ns</span>\n        and <span class=\"tei-parameter code\">lng</span> : </p>\n      <dl><dt>lng</dt><dd>\n            <p class=\"tei-para\"> the language code for a selected language, e.g. <span class=\"tei-code2 code\">de</span> or\n                <span class=\"tei-code2 code\">fr</span>\n            </p>\n          </dd><dt>ns</dt><dd>\n            <p class=\"tei-para\"> the namespace prefix used to distinguish between different collections of\n              language files. By default, TEI Publisher expects custom language files to be in a\n              namespace called <span class=\"tei-code2 code\">app</span>, though this can be configured. </p>\n          </dd></dl>\n      <p class=\"tei-para\"> So given above configuration, TEI Publisher will search for a custom language file for,\n        say, French in <span class=\"tei-code2 code\">resources/i18n/app/fr.json</span>. If you prefer a flat directory\n        structure, you could change the <span class=\"tei-parameter code\">locale</span> to <span class=\"tei-code2 code\">\n          resources/i18n/{{ns}}_{{lng}}.json</span> and TEI Publisher will look for a file <span class=\"tei-code2 code\">\n          resources/i18n/app_fr.json</span>. </p>\n      <p class=\"tei-para\"> You may also define additional namespaces to be searched with the <span class=\"tei-parameter code\">\n          locale-fallback-ns</span> parameter: </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"html\">&lt;pb-page locales=\"resources/i18n/{{ns}}/{{lng}}.json\"\n        locale-fallback-ns=\"app my-module\"&gt;</pb-code-highlight>\n      <p class=\"tei-para\"> which means that TEI Publisher will search for labels in the <span class=\"tei-code2 code\">my-module</span>\n        namespace first, then falling back to the <span class=\"tei-code2 code\">app</span> namespace, and if the label could\n        still not be found, using TEI Publisher's default namespace. The latter is called <span class=\"tei-code2 code\">\n          common</span> and should not be overwritten. </p>\n      <p class=\"tei-para\"> Listing below demonstrates a fictional <span class=\"tei-filename code\">en.js</span> with a custom set of\n        labels. A new top-level key has been added as well as 3 subkeys for the <span class=\"tei-code2 code\">menu</span>\n        section. Now the project has access to a number of new i18n keys: <span class=\"tei-code2 code\">menu.about</span>,\n          <span class=\"tei-code2 code\"> menu.contact</span>, <span class=\"tei-code2 code\">menu.statute</span> and <span class=\"tei-code2 code\">greeting</span>. </p>\n      <p class=\"tei-para\"> Furthermore, a value for <span class=\"tei-code2 code\">menu.documentation</span> has been specified. That key\n        already existed in Publisher (set to \"Documentation\") but the version from custom file will\n        take precedence and be used in the custom app. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\n{\n  \"menu\": {\n    \"documentation\": \"Docu\",\n    \"about\": \"About\",\n    \"contact\": \"Contact\",\n    \"statute\": \"Statute\"\n    },\n  \"greeting\": \"Welcome\"\n}\n      </pb-code-highlight>\n      <p class=\"tei-para\"></p>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}