{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.12.9.7",
    "rootNode": "3.12.9.7",
    "id": "modify-odd",
    "odd": "docbook.odd",
    "next": "3.12.9.9",
    "previous": "3.12.9",
    "nextId": "visualodd",
    "previousId": "odd-customization-details",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"modify-odd\"><pb-observable data=\"3.12.9.7,3.12.9.7\" emit=\"transcription\">\n        <h3 class=\"tei-title7 title\">Modify the ODD</h3>\n        <p class=\"tei-para\">\n          Changing processing models in the ODD is a powerful mechanism through which you can\n            control all aspects of the transformation of your documents from source XML format to\n            all output formats: HTML, ePUB, PDF etc. As already mentioned it is considered best\n            practice to chain ODD customizations together and rather change or add project specific\n            rules to more generic ODD than copy them in extenso. ODD chaining allows for the future\n            upgrades as your base ODDs may be updated by standardization bodies which maintain them.\n            Commonly project ODDs would extend\n          <span class=\"tei-filename code\">teipublisher.odd</span>\n          , a generic TEI\n            Publisher set of processing rules.\n        </p>\n        <p class=\"tei-para\">Beginning with version 3.0 of TEI Publisher, you have the choice between writing the\n            ODD by hand or using a visual editor. Both approaches can be combined and mixed. The\n            visual editor saves the ODD in a non-destructive way, preserving any information not\n            related to the processing model. It is thus safe to switch between hand-editing the ODD\n            and using the visual editor. Just make sure you reload the visual editor view after\n            modifying the source XML and vice versa. That said, visual editor is specifically\n            tailored to editing processing models so it will be likely the fastest and safest way to\n            edit your ODD.</p>\n        <p class=\"tei-para\">To be able to customize the display of your document it is crucial to understand its\n            XML structure well. Each of processing models needs to be aimed at a particular XML\n            element and sometimes is only meant for a specific XML context - let's say we might want\n            to distinguish between headings of first and second level of nested divisions as they\n            often represent titles of different text units: acts and scenes or books and\n            chapters.</p>\n        <p class=\"tei-para\">We'll start with the Graves' letter you have already viewed applying your custom ODD\n            in previous section. The display is quite simple and easy to read but we might want to\n            adjust it to follow common visual conventions for a letter, starting with displaying the\n            dateline on the right hand side and completely removing the page label which currently\n            sits there.</p>\n        <p class=\"tei-para\"> To create a processing model addressing this need we have to know 3 things: </p>\n        <ul class=\"tei-itemizedlist\"><li class=\"tei-listitem\">\n            <p class=\"tei-para\">\n              <span class=\"tei-emphasis1\">when</span>\n              should it be applied,\n            </p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">\n              <span class=\"tei-emphasis1\">what</span>\n              is supposed to happen\n            </p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">\n              and\n              <span class=\"tei-emphasis1\">how</span>\n              should the text be formatted?\n            </p>\n          </li></ul>\n        <p class=\"tei-para\">\n          To be able to answer the first question, you should familiarize yourself with the\n            XML structure of the letter to find out how datelines are represented in TEI. In the tab\n            displaying the letter, select\n          <span class=\"tei--element\">Download</span>\n          /\n          <span class=\"tei--element\">XML\n            </span>\n          to open\n          <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/data/test/graves6.xml\">\n            <span class=\"tei-filename code\">graves6.xml</span>\n          <iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span>\n          in eXide. Quick investigation of the TEI encoding will reveal that dateline\n            resides in its eponymic tag\n          <span class=\"tei-tag code\">dateline</span>\n          wchich is nested in the\n          <span class=\"tei-tag code\">opener</span>\n          part of the document, while page labels are encoded with\n          <span class=\"tei-tag code\">pb</span>\n          .\n        </p>\n        <p class=\"tei-para\">\n          We'll use the visual editor, but show the corresponding ODD XML below each\n            screenshot. At the end of this chapter we'll describe how to edit the ODD XML code\n          <a href=\"/?odd=docbook.odd&amp;view=div&amp;id=oddxml\" class=\"tei-link3\" target=\"\">by hand</a>\n          .\n        </p>\n      </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}