{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.12.17.11.11",
    "rootNode": "3.12.17.11.11",
    "id": "pb-template",
    "odd": "docbook.odd",
    "next": "3.12.17.11.13",
    "previous": "3.12.17.11",
    "nextId": "pb-behaviour",
    "previousId": "pm-extensions-templates",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"pb-template\"><pb-observable data=\"3.12.17.11.11,3.12.17.11.11\" emit=\"transcription\">\n          <h4 class=\"tei-title7 title\">\n            Introducing\n            <span class=\"tei-tag code\">pb:template</span>\n          </h4>\n          <p class=\"tei-para\">\n            TEI Publisher thus supports an extension to the ODD syntax in its own namespace\n                (\n            <span class=\"tei-parameter code\">http://teipublisher.com/1.0</span>\n            ).\n          </p>\n          <p class=\"tei-para\">\n            Within the ODD, a\n            <span class=\"tei-tag code\">model</span>\n            may define a\n            <span class=\"tei-tag code\">pb:template</span>\n            element\n              containing a code template. The template is expanded first and the result is passed\n              into the behaviour specified for the model, replacing the default\n            <span class=\"tei-parameter code\">content</span>\n            parameter accepted by all behaviours. The very simple\n              case of outputting a\n            <span class=\"tei-tag code\">persName</span>\n            in LaTeX could thus be written as:\n          </p>\n\n          <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;elementSpec ident=\"persName\" mode=\"add\"&gt;\n    &lt;model behaviour=\"inline\" output=\"latex\"&gt;\n        &lt;pb:template&gt;\\persName{[[content]]}&lt;/pb:template&gt;\n    &lt;/model&gt;\n&lt;/elementSpec&gt;</pb-code-highlight>\n          <p class=\"tei-para\">\n            The template can reference other parameters defined within the\n            <span class=\"tei-tag code\">model</span>\n            by\n              enclosing the parameter name in double brackets. In the example above we're\n              referencing the default parameter\n            <span class=\"tei-parameter code\">content</span>\n            , which contains the\n              nested content of the\n            <span class=\"tei-tag code\">persName</span>\n            tag. The parameter will be processed before\n              it is passed into the template, so if\n            <span class=\"tei-tag code\">persName</span>\n            contains nested TEI markup,\n              the corresponding processing model rules will be applied first.\n          </p>\n          <p class=\"tei-para\">\n            The result of expanding the template then becomes the new\n            <span class=\"tei-parameter code\">content</span>\n            parameter to be passed to the behaviour\n                (\n            <span class=\"tei-code2 code\">inline</span>\n            in the example above), which is processed in the normal way as\n              defined in the TEI guidelines.\n          </p>\n          <p class=\"tei-para\">\n            You may also specify additional parameters to be included in the template. For\n              example, the TEI document may contain a glossary of terms which are referenced in the\n              text using\n            <span class=\"tei-code2 code\">&lt;term ref=\"#termid\"&gt;text&lt;/term&gt;</span>\n            . In LaTeX this\n              would translate to\n            <span class=\"tei-code2 code\">\\glslink{ref}{text}</span>\n            , which can be easily produced by\n              the following\n            <span class=\"tei-tag code\">model</span>\n            :\n          </p>\n          <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;elementSpec ident=\"term\" mode=\"add\"&gt;\n    &lt;model behaviour=\"inline\" output=\"latex\"&gt;\n        &lt;param name=\"ref\" value=\"substring-after(@ref, '#')\"/&gt;\n        &lt;pb:template&gt;\\glslink{[[ref]]}{[[content]]}&lt;/pb:template&gt;\n    &lt;/model&gt;\n&lt;/elementSpec&gt;</pb-code-highlight>\n          <p class=\"tei-para\">\n            We define an additional parameter\n            <span class=\"tei-parameter code\">ref</span>\n            , which contains the\n              id string from the\n            <span class=\"tei-parameter code\">@ref</span>\n            attribute, stripping out the leading\n              '#'.\n          </p>\n          <p class=\"tei-para\">The templating mechanism is not limited to LaTeX, but may also be used to generate\n            HTML or FO, for example, if you have to generate a complex HTML fragment to represent\n            a single TEI element. This is hard and sometimes impossible to achieve without\n            templates</p>\n          <p class=\"tei-para\">This following sample uses the <span class=\"tei-parameter code\">pb-popover</span> webcomponent to display \n            the tei:persName from a person register for a given tei:persName/@key of your TEI \n            document. </p>\n        <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;elementSpec ident=\"persName\" mode=\"add\"&gt;\n        &lt;model behaviour=\"inline\" cssClass=\"popover\"&gt;\n            &lt;param name=\"content\" value=\".\"/&gt;\n            &lt;param name=\"key\" value=\"@key\"/&gt;\n            &lt;param name=\"person-from-register\" value=\"doc('/path/to/person.xml')//person[@id = @key]/persName[@type='full']/text()\"&gt;\n            &lt;pb:template xmlns=\"\" xml:space=\"preserve\"&gt;\n                &lt;pb-popover data-ref=\"[[key]]\"&gt;\n                    &lt;span slot=\"default\"&gt;[[content]]&lt;/span&gt;\n                    &lt;span slot=\"alternate\"&gt;[[person-from-register]]&lt;/span&gt;\n                &lt;/pb-popover&gt;\n            &lt;/pb:template&gt;\n        &lt;/model&gt;\n        </pb-code-highlight>              \n      </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}