{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.11.17.11.13",
    "rootNode": "3.11.17.11.13",
    "id": "pb-behaviour",
    "odd": "docbook.odd",
    "next": "3.11.17.13",
    "previous": "3.11.17.11.11",
    "nextId": "extension-modules",
    "previousId": "pb-template",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"pb-behaviour\"><pb-observable data=\"3.11.17.11.13,3.11.17.11.13\" emit=\"transcription\">\n        <h4 class=\"tei-title6 title\">Defining New Behaviours in the ODD</h4>\n        <p class=\"tei-para\">By combining code templates with parameters we can come up with a very simple\n            mechanism to define new behaviours right inside the ODD!</p>\n        <p class=\"tei-para\">\n          Take the TEI Publisher documentation as an example: it is written in docbook 5 and\n            transformed via ODD. The documentation includes some videos which are hosted on youtube.\n            In docbook those are represented by\n          <span class=\"tei-tag code\">videodata</span>\n          elements inside a\n          <span class=\"tei-tag code\">videoobject</span>\n          :\n        </p>\n        <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;figure xml:id=\"edit-odd\"&gt;\n    &lt;title&gt;Screencast&lt;/title&gt;\n    &lt;mediaobject&gt;\n      &lt;videoobject&gt;\n        &lt;videodata fileref=\"https://www.youtube.com/embed/avRO-b2BwUI?rel=0\" width=\"853\" depth=\"480\"/&gt;\n      &lt;/videoobject&gt;\n    &lt;/mediaobject&gt;\n&lt;/figure&gt;</pb-code-highlight>\n        <p class=\"tei-para\">\n          In the HTML output we would need to transform this into an\n          <span class=\"tei-tag code\">iframe</span>\n          , so the\n            reader can view the video embedded in the page. We can achieve this with a\n          <span class=\"tei-tag code\">pb:template</span>\n          as sketched in the previous section, but it would be nice to\n            turn this into a general-purpose behaviour, which we can re-use in other situations\n            requiring an iframe. The TEI Publisher library allows us to define a behaviour right\n            inside the ODD as follows:\n        </p>\n\n        <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;pb:behaviour ident=\"iframe\" output=\"web\"&gt;\n    &lt;pb:param name=\"src\"/&gt;\n    &lt;pb:param name=\"width\"/&gt;\n    &lt;pb:param name=\"height\"/&gt;\n    &lt;pb:template xmlns=\"\"&gt;\n        &lt;iframe src=\"[[src]]\" width=\"[[width]]\" height=\"[[height]]\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"allowfullscreen\"&gt;&lt;/iframe&gt;\n    &lt;/pb:template&gt;\n&lt;/pb:behaviour&gt;</pb-code-highlight>\n\n        <div class=\"tei-note3 note\"><h4 class=\"tei-title4\">Note</h4><p class=\"tei-para\">\n            Note how we have to reset the namespace on the\n            <span class=\"tei-tag code\">pb:template</span>\n            ? This is\n              required because the default namespace in an ODD document is the TEI namespace. You\n              thus need to reset it whenever you want to output elements in another or no namespace\n              inside a template. Without this, the iframe would end up in the TEI namespace.\n              Webbrowsers will usually ignore it, but it will be wrong nevertheless.\n          </p></div>\n        <p class=\"tei-para\">\n          All behaviours should be included in the TEI header or - to be exact: the\n          <span class=\"tei-tag code\">tagsDecl</span>\n          inside the\n          <span class=\"tei-tag code\">encodingDesc</span>\n          . You may have multiple\n            behaviour declarations with the same\n          <span class=\"tei-parameter code\">@ident</span>\n          , given that they\n            apply to different\n          <span class=\"tei-parameter code\">@output</span>\n          modes. Parameters specified via\n          <span class=\"tei-tag code\">pb:param</span>\n          without\n          <span class=\"tei-parameter code\">@value</span>\n          attribute are expected to be\n            passed to the behaviour from the calling model. A parameter may be empty though. If you\n            define an XPath expression as\n          <span class=\"tei-parameter code\">@value</span>\n          attribute, the result of the\n            XPath evaluation will be used as value for the parameter.\n        </p>\n        <p class=\"tei-para\">\n          The new behaviour will be named\n          <span class=\"tei-function code\">iframe</span>\n          and takes three\n            parameters:\n          <span class=\"tei-parameter code\">src</span>\n          ,\n          <span class=\"tei-parameter code\">width</span>\n          and\n          <span class=\"tei-parameter code\">height</span>\n          . It can now be called from a\n          <span class=\"tei-tag code\">model</span>\n          as\n            follows:\n        </p>\n        <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;model behaviour=\"iframe\"&gt;\n    &lt;param name=\"width\" value=\"@width\"/&gt;\n    &lt;param name=\"height\" value=\"@depth\"/&gt;\n    &lt;param name=\"src\" value=\"@fileref\"/&gt;\n&lt;/model&gt;</pb-code-highlight>\n        <p class=\"tei-para\">\n          For further code examples, please have a look at\n          <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/odd/docbook.odd\">docbook.odd<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span>\n          , which is used for viewing the documentation.\n        </p>\n        <div class=\"tei-note3 note\"><h4 class=\"tei-title4\">Note</h4><p class=\"tei-para\">\n            At the time of writing, the graphical ODD editor in TEI Publisher does not yet\n              support defining your own behaviours via\n            <span class=\"tei-tag code\">pb-behaviour</span>\n            . You thus have to\n              make those changes in the source XML using eXide, oXygen or another XML editor. You\n              can, however, use the graphical editor to continue editing the ODD afterwards. It is\n              smart enough to not overwrite your hand-written code upon save.\n          </p></div>\n      </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}