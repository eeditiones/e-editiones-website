{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.12.17",
    "rootNode": "3.12.17",
    "id": "pm-extensions",
    "odd": "docbook.odd",
    "next": "3.12.17.7",
    "previous": "3.12.15.17",
    "nextId": "pm-extensions-default",
    "previousId": "output-print-css",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"pm-extensions\"><pb-observable data=\"3.12.17,3.12.17\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Extensions to the Processing Model Specification</h2>\n      <div class=\"tei-section4\" id=\"pm-extensions-xquery\"><pb-observable data=\"3.12.17,3.12.17.5\" emit=\"transcription\">\n        <h3 class=\"tei-title7 title\">XQuery Instead of XPath</h3>\n        <p class=\"tei-para\">The implementation directly translates processing model instructions into an XQuery\n          3.1 module by generating executable XQuery code. This is straightforward as the resulting\n          XQuery will closely resemble the specification in the ODD, thus being easy to debug. It\n          also leads to very efficient code, which is as fast or even faster as a hand-written,\n          optimized transformation.</p>\n        <p class=\"tei-para\"> As a welcome side effect, any valid XQuery expression might be used wherever the spec\n          expects an XPath expression, e.g. in predicates or parameters. For example, one can define\n          variables inside a parameter using a standard XQuery <span class=\"tei-code2 code\">let $x := ...\n            return ...</span> syntax. </p>\n      </pb-observable></div></pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}