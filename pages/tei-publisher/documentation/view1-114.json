{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.33.25",
    "rootNode": "3.33.25",
    "id": "custom-components-clipboard",
    "odd": "docbook.odd",
    "next": "3.33.27",
    "previous": "3.33",
    "nextId": "custom-components-testing",
    "previousId": "custom-components",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"custom-components-clipboard\"><pb-observable data=\"3.33.25,3.33.25\" emit=\"transcription\">\n      <h2 class=\"tei-title6 title\">pb-clipboard example</h2>\n      <p class=\"tei-para\">\n        We will discuss the details of the\n        <span class=\"tei-tag code\">pb-clipboard</span>\n        element to illustrate some\n          basic concepts. You will find exact code of this example in\n        <span class=\"tei-code2 code\">pb-extension-template/src/pb-clipboard.js</span>\n        . Each custom component has a\n          defined API: an interface it presents to the outside world. It includes properties,\n          methods (also called functions) and events but it bundles HTML markup along with local CSS\n          and JavaScript into a single file.\n      </p>\n      <p class=\"tei-para\">\n        Our example is a custom element designed to provide simple\n        <span class=\"tei-emphasis2\">copy-to-clipboard</span>\n        functionality, helpful e.g. when providing\n          ready-made citation on a page. It consists of three parts: a label, the content to be\n          copied and a button to copy.\n      </p>\n      <p class=\"tei-para\">Thus, render function which actually displays this custom component could look like\n          this:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\n    render() {\n        return html`\n            &lt;h3&gt;${translate(this.label)}&lt;/h3&gt;\n            &lt;div&gt;\n                &lt;slot&gt;&lt;/slot&gt;\n                &lt;paper-icon-button icon=\"icons:content-copy\" @click=\"${this._copy}\"\n                    title=\"${translate('clipboard.copy')}\"&gt;&lt;/paper-icon-button&gt;\n            &lt;/div&gt;\n        `;\n    }\n      </pb-code-highlight>\n      <p class=\"tei-para\">\n        You will note that the render function uses not only regular HTML elements like\n        <span class=\"tei-tag code\">h3</span>\n        or\n        <span class=\"tei-tag code\">div</span>\n        but also components from the\n        <span class=\"tei-code2 code\">paper-</span>\n        package. To be able to use them, we need to explicitly import them. Same is true for\n        <span class=\"tei-code2 code\">LitElement</span>\n        class itself and important interface from the\n        <span class=\"tei-code2 code\">pb-components</span>\n        package:\n        <span class=\"tei-code2 code\">pbMixin</span>\n        .\n      </p>\n      <p class=\"tei-para\">\n        All user interface components may need to be localized. For that reason we also import\n        <span class=\"tei-code2 code\">translate</span>\n        method from TEI Publisher's\n        <span class=\"tei-code2 code\">i18n</span>\n        module.\n      </p>\n      <p class=\"tei-para\">\n        <span class=\"tei-code2 code\">LitElement</span>\n        and\n        <span class=\"tei-code2 code\">pbMixin</span>\n        must be imported for all custom\n          components extending\n        <span class=\"tei-code2 code\">pb-components</span>\n        . Code listing below demonstrates how to\n          correctly import all classes and custom elements required as well as how to create a class\n          signature that extends\n        <span class=\"tei-code2 code\">pbMixin</span>\n        .\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\nimport { LitElement, html, css } from 'lit-element';\nimport { pbMixin } from '@teipublisher/pb-components/src/pb-mixin';\nimport { translate } from \"@teipublisher/pb-components/src/pb-i18n\";\nimport '@polymer/paper-icon-button';\nimport '@polymer/iron-icons';\n\n/**\n * A component with a button which copies the contained content to the clipboard.\n * Use for the typical 'quote this content as' hints on a webpage.\n * \n * @slot content - contains the actual content to copy to the clipboard\n */\nexport class PbClipboard extends pbMixin(LitElement) {\n      </pb-code-highlight>\n\n      <p class=\"tei-para\">\n        Imports and render function sorted, there are two other static functions we need to\n          take care of:\n        <span class=\"tei-function code\">properties</span>\n        and\n        <span class=\"tei-function code\">styles</span>\n        .\n        <span class=\"tei-code2 code\">pb-clipboard</span>\n        has just a single property: the label to display above the\n          copy text. Nevertheless it needs to explicitly declare properties inherited from pbMixin\n          which is done via\n        <span class=\"tei-code2 code\">...super.properties</span>\n        notation.\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\nstatic get properties() {\n        return {\n            /**\n             * Label to display above the text to be copied\n             */\n            label: {\n                type: String\n            },\n            ...super.properties\n        };\n    }\n      </pb-code-highlight>\n\n      <p class=\"tei-para\">\n        You probably noticed that the button we added in the\n        <span class=\"tei-function code\">render</span>\n        function specifies what to do upon click event via\n        <span class=\"tei-code2 code\">click</span>\n        attribute:\n        <span class=\"tei-code2 code\">@click=\"${this._copy}\"</span>\n        . A protected\n        <span class=\"tei-function code\">_copy</span>\n        function of\n          the element is called in such case and for our simple\n        <span class=\"tei-code2 code\">pb-clipboard</span>\n        element it\n          provides its core\n        <span class=\"tei-emphasis2\">copy-to-clipboard</span>\n        functionality.\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\n/**\n* Copy text content from the &lt;slot&gt; to the clipboard\n*/\n\n    _copy() {\n        const slot = this.shadowRoot.querySelector('slot');\n        \n        // first import nodes from the slot into a temporary div\n        const content = document.createElement('div');\n        slot.assignedNodes().forEach((node) =&gt; {\n            content.appendChild(document.importNode(node, true));\n        });\n        \n        // copy the innerText of the temp div into the clipboard\n        navigator.clipboard.writeText(content.innerText);\n    }\n      </pb-code-highlight>\n\n      <p class=\"tei-para\">\n        We glanced over yet another interesting function invoked in the\n        <span class=\"tei-code2 code\">render</span>\n        method.\n        <span class=\"tei-code2 code\">translate</span>\n        , which accepts as an argument a key identifying a\n          corresponding label in i18n language files. It could be one of keys shipping with TEI\n          Publisher, but here, for a new component we need a more specific label, presenting the\n          user with a short, informative text to be displayed when hovering over\n        <span class=\"tei-emphasis2\">copy-to-clipboard</span>\n        button. Obviously, the label should change in\n          line with the language setting for the whole application, which is why we need the i18n\n          module in the first place.\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\n        title=\"${translate('clipboard.copy')}\"\n      </pb-code-highlight>\n      <p class=\"tei-para\">\n        Please refer to the chapter on\n        <a href=\"/?odd=docbook.odd&amp;view=div&amp;id=i18n\" class=\"tei-link3\" target=\"\">i18n</a>\n        for in-depth\n          discussion of the subject. Here we'll just mention that additional language files for new\n          components should be placed in\n        <span class=\"tei-filename code\">i18n/app</span>\n        , mimicking the location and\n          format of Publisher.\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\n{\n  \"clipboard\": {\n     \"label\": \"Quote  as:\",\n     \"copy\": \"Click to copy to clipboard\"\n  }\n}\n      </pb-code-highlight>\n      <p class=\"tei-para\">And one last job is a little bit of styling to make things pretty.</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\nstatic get styles() {\n        return css`\n            :host {\n                display: block;\n            }\n            h3 {\n                margin: 0;\n                font-size: .85em;\n                font-weight: normal;\n                color: #3a3a3a;\n            }\n            div {\n                display: flex;\n                align-items: center;\n                padding: 0 16px;\n            }\n        `;\n    }\n      </pb-code-highlight>\n      <p class=\"tei-para\">\n        The final directive at the very bottom of\n        <span class=\"tei-filename code\">pb-clipboard.js</span>\n        is\n          necessary to register the custom element with the browser.\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\" line-numbers=\"line-numbers\">\n        customElements.define('pb-clipboard', PbClipboard);\n      </pb-code-highlight>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}