{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.12.15.13",
    "rootNode": "3.12.15.13",
    "id": "output-media-latex",
    "odd": "docbook.odd",
    "next": "3.12.15.15",
    "previous": "3.12.15.11",
    "nextId": "output-media-epub",
    "previousId": "output-media-fo",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"output-media-latex\"><pb-observable data=\"3.12.15.13,3.12.15.13\" emit=\"transcription\">\n        <h3 class=\"tei-title7 title\">LaTeX Output</h3>\n        <p class=\"tei-para\">The latex output mode produces good results for longer texts which fit well into the\n          pre-defined LaTeX environments. The number of supported CSS properties is limited though:</p>\n        <ul class=\"tei-itemizedlist\"><li class=\"tei-listitem\">\n            <p class=\"tei-para\">font-weight</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">font-style</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">font-variant</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">font-size</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">color</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">text-decoration</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">text-align</p>\n          </li><li class=\"tei-listitem\">\n            <p class=\"tei-para\">text-indent</p>\n          </li></ul>\n        <p class=\"tei-para\"> To create arbitary complex LaTeX output, you may want to use the <a href=\"/?odd=docbook.odd&amp;view=div&amp;id=pb-template\" class=\"tei-link3\" target=\"\">\n            <span class=\"tei-tag code\">pb-template</span> extension </a> to the ODD syntax. It is heavily used to e.g.\n          generate the LaTeX version of this documentation. See also <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/odd/serafin.odd\">serafin.odd<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span> or <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/odd/vangogh.odd\">vangogh.odd<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span> for examples. </p>\n        <p class=\"tei-para\"> TEI Publisher creates a default LaTeX prolog based on standard packages and settings.\n          You may overwrite the defaults by providing your own template within the ODD element spec\n          for the TEI root element. See the example ODDs mentioned above. Note that TEI Publisher\n          will generate some LaTeX macros for styles defined in <span class=\"tei-tag code\">outputRendition</span> which\n          should be imported into the prolog. The styles are added to the default configuration map\n          and can be accessed via <span class=\"tei-command code\">$config('latex-styles')</span> . Refer to the example\n          ODDs and just copy/paste the corresponding lines. </p>\n        <p class=\"tei-para\"> This output mode requires a local installation of LaTeX on the machine running TEI\n          Publisher. The examples have been tested on a default installation of MacTeX 2018. If you\n          are not running MacTeX, you likely need to adjust the path to the LaTeX binary in the\n          XQuery configuration module <span class=\"tei-filename code\">modules/config.xqm</span> . Search for the\n          variable <span class=\"tei-parameter code\">$config:tex-command</span> and adjust it to point to a binary of <span class=\"tei-command code\">\n          xelatex</span> , <span class=\"tei-command code\">pdflatex</span> or <span class=\"tei-command code\">lualatex</span> . </p>\n      </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}