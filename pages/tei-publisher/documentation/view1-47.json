{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.12.13",
    "rootNode": "3.12.13",
    "id": "external-css",
    "odd": "docbook.odd",
    "next": "3.12.15",
    "previous": "3.12.11.13.7",
    "nextId": "output-media",
    "previousId": "behaviours-available",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"external-css\"><pb-observable data=\"3.12.13,3.12.13\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Including General CSS Styles</h2>\n      <p class=\"tei-para\"> TEI Publisher is based on webcomponents, therefore styling of one document will not\n        interfere with the styling of another document on the same page. All styles are strictly\n        encapsulated within the component and do not \"pollute\" the global browser space. This also\n        has a downside though: CSS rules defined outside the <span class=\"tei-tag code\">pb-view</span> have no influence on\n        the text styling inside the component (with some exceptions, mainly for properties which are\n        inherited down the HTML tree, e.g. <span class=\"tei-parameter code\">font-family</span> ). </p>\n      <p class=\"tei-para\"> However, putting <span class=\"tei-emphasis2\">all</span> styling information into <span class=\"tei-tag code\">outputRendition</span>\n        tags within the ODD is also not a good idea - it adds a lot of redundancy and mixes\n        editorial responsibilities with web design concerns. </p>\n      <p class=\"tei-para\"> The recommended solution would therefore be to use CSS classes for repeating styling\n        aspects. TEI Publisher supports linking to an external CSS stylesheet from the <span class=\"tei-code2 code\">\n        encodingDesc/tagsDecl/rendition</span> section of the ODD. Just specify a relative link in\n        the <span class=\"tei-parameter code\">@source</span> attribute: </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">\n                  &lt;rendition source=\"docbook.css\"/&gt;\n          </pb-code-highlight>\n      <p class=\"tei-para\">The file should be stored in the same collection as the source ODD it is referenced\n        from. The linked file should be a standard CSS stylesheet.</p>\n      <p class=\"tei-para\">Note that unfortunately, editing renditions is not yet supported by the visual ODD\n        editor, so you will have to fall back to add the corresponding elements to the ODD by hand.</p>\n      <p class=\"tei-para\"> Alternatively, one may also use the same TEI element <span class=\"tei-tag code\">rendition</span> with the <span class=\"tei-parameter code\">\n        @selector</span> attribute to embed CSS rules directly in the ODD. </p>\n\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;rendition selector=\"h3\"&gt;\n  font-family: serif;\n  font-weight: 400;\n&lt;/rendition&gt;</pb-code-highlight>\n      <p class=\"tei-para\">Choose one of the two approaches, but do not mix them. In both cases make sure to\n        recompile the ODD after changes as the CSS is merged into the generated code!</p>\n\n      <p class=\"tei-para\"> New addition in Publisher 6.0 allows to pass the external CSS file in <span class=\"tei-code2 code\">load-css</span>\n        attribute of <span class=\"tei-code2 code\">pb-view</span> . Recompiling ODD in this case is not necessary, otherwise\n        it is functionally equivalent to using ODD <span class=\"tei-code2 code\">rendition</span> . </p>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}