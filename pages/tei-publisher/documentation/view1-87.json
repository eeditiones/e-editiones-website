{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.20",
    "rootNode": "3.20",
    "id": "url-routing",
    "odd": "docbook.odd",
    "next": "3.20.7",
    "previous": "3.18.19",
    "nextId": "client-side-urls",
    "previousId": "api-custom-endpoints",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"url-routing\"><pb-observable data=\"3.20,3.20\" emit=\"transcription\">\n    <h1 class=\"tei-title7 title\">URL Routing</h1>\n    <div class=\"tei-section4\" id=\"custom-urls\"><pb-observable data=\"3.20,3.20.5\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Creating custom URLs</h2>\n      <p class=\"tei-para\">By default, TEI Publisher addresses the different example pages by the name of the XML document displayed, which means users will see\n        the relative path to the document in the URL. A request to <span class=\"tei-code2 code\">/test/adagia.xml</span> will be handled by the Open API route matching the \n        path <span class=\"tei-code2 code\">\"/{docid}\"</span>, which then calls the XQuery function <span class=\"tei-function code\">vapi:view</span> to retrieve the HTML template \n        associated with the TEI document and return it to the browser:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"javascript\">\n\"/{docid}\": {\n\t\"get\": {\n\t\t\"summary\": \"Retrieve the HTML template used for displaying a document\",\n\t\t\"description\": \"Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.\",\n\t\t\"tags\": [\"view\"],\n\t\t\"operationId\": \"vapi:view\",\n\t\t\"x-error-handler\": \"vapi:handle-error\",\n\t\t...\n\t}\n}\n</pb-code-highlight>\n      <p class=\"tei-para\">Addressing by relative path is convenient for a heterogenous collection like the one in TEI Publisher, but for a more homogenous\n        edition, you may prefer other addressing schemes, e.g. using an identifier. For example, the Alfred Escher Briefedition uses URLs like \n        <a href=\"https://briefedition.alfred-escher.ch/briefe/B0017\" class=\"tei-link4\" target=\"_new\">https://briefedition.alfred-escher.ch/briefe/B0017</a>. Using an abstract identifier has the advantage that bookmarked URLs\n        remain accessible even if the implementation changes (as happened for Escher), given that the identifier is stable. An even more complex addressing scheme can be found in the <a href=\"https://www.johannconradfischer.com\" class=\"tei-link4\" target=\"_new\">Johann Conrad Fischer</a> edition. Here the different travel journals are addressed by the year they cover, and the chapter to show is given as a number. Additionally, the language is given in the first path parameter, so the resulting URLs have the form: <span class=\"tei-code2 code\">/language/year/chapter</span>, e.g. <span class=\"tei-code2 code\">/de/1794/9</span>. Obviously implementing a scheme like this requires a bit more tweaking, so we'll concentrate on simpler cases like the one in Escher.\n      </p>\n      <p class=\"tei-para\">TEI Publisher includes two examples, which deviate from the default addressing scheme:</p>\n      <dl><dt>TEI Publisher documentation</dt><dd><p class=\"tei-para\">The entire documentation is contained in one file. Users may want to copy or bookmark a specific section, whose identifier is thus encoded in the URL using a scheme <span class=\"tei-code2 code\">/documentation/{identifier}</span>.</p></dd><dt><a href=\"/../encyclopedia\" class=\"tei-link4\" target=\"_new\">Damen Conversations Lexikon</a></dt><dd>\n            <p class=\"tei-para\">An early 19th century encyclopedia in German. An encyclopedia or dictionary is usually not read page by page. Instead users will want to browse to a particular headword they are interested in. Accordingly, the URL should reflect the chosen headword rather than the document. URLs are thus of the form <span class=\"tei-code2 code\">/encyclopedia/{headword}</span>.</p>\n          </dd></dl>\n      <p class=\"tei-para\">Both examples need two route definitions: the first corresponding to the root page displayed, i.e. if the user has not selected a chapter or headword, the second to represent the detail view of a chapter or headword. For the documentation, <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/modules/custom-api.json\">modules/custom-api.json<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span> thus has configurations for <span class=\"tei-code2 code\">/documentation</span> as well as <span class=\"tei-code2 code\">/documentation/{id}</span>. In both cases we simply copied and modified the configuration for the standard path, i.e. <span class=\"tei-code2 code\">\"/{docid}\"</span>, from <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/modules/lib/api.json\">modules/lib/api.json<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span>.</p>\n    <p class=\"tei-para\">The default endpoint takes various parameter, including two required ones: <span class=\"tei-parameter code\">docid</span> for the path to the TEI document, and <span class=\"tei-parameter code\">template</span> to specify the HTML template to use. For the documentation those will always be the same, i.e. <span class=\"tei-filename code\">doc/documentation.xml</span> and <span class=\"tei-filename code\">pages/documentation.html</span>, so we can pass them as a default value. This way we can reuse the existing operation (<span class=\"tei-function code\">vapi:view</span>) and don't have to write a custom handler function in XQuery!</p>\n      <p class=\"tei-para\">We also add two parameters, <span class=\"tei-parameter code\">id</span> and <span class=\"tei-parameter code\">base</span>. The first will take the <span class=\"tei--element\">xml:id</span> of the chapter we're looking for. <span class=\"tei-parameter code\">id</span> is one of the standard parameters picked up by the <span class=\"tei-tag code\">pb-view</span> in the HTML when loading the actual content to display. <span class=\"tei-parameter code\">base</span> will be used in the template to set the HTML <span class=\"tei-tag code\">base</span> tag in the HTML head. This is required to tell the browser where images and other resources should be loaded from:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"html\">&lt;head&gt;\n  &lt;base href=\"${base}\" data-template=\"pages:parse-params\"/&gt;\n  ...\n&lt;/head&gt;</pb-code-highlight>\n      <p class=\"tei-para\">The complete definition of the route in <span class=\"tei-link2\"><pb-edit-xml path=\"/db/apps/tei-publisher/modules/custom-api.json\">modules/custom-api.json<iron-icon icon=\"icons:open-in-new\"></iron-icon></pb-edit-xml></span> looks like this:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"javascript\">\n\"/documentation/{id}\": {\n  \"get\": {\n      \"summary\": \"Select the HTML template for viewing the documentation\",\n      \"description\": \"Shows a particular chapter as indicated by the id\",\n      \"tags\": [\"documentation\"],\n      \"operationId\": \"vapi:view\",\n      \"x-error-handler\": \"vapi:handle-error\",\n      \"parameters\": [\n          {\n              \"name\": \"id\",\n              \"in\": \"path\",\n              \"required\": true,\n              \"schema\": {\n                  \"type\": \"string\"\n              }\n          },\n          {\n    \t\t\t\t\"name\": \"template\",\n    \t\t\t\t\"in\": \"query\",\n    \t\t\t\t\"schema\": {\n  \t\t\t\t\t\t\"type\": \"string\",\n              \"default\": \"pages/documentation.html\"\n\t\t\t\t\t  }\n\t\t\t\t\t},\n            {\n                \"name\": \"docid\",\n                \"in\": \"query\",\n                \"schema\": {\n                    \"type\": \"string\",\n                    \"default\": \"doc/documentation.xml\"\n                }\n            },\n            {\n                \"name\": \"base\",\n                \"in\": \"query\",\n                \"schema\": {\n                    \"type\": \"string\",\n                    \"default\": \"../doc/documentation.xml\"\n                }\n            }\n        ],\n        \"responses\": {\n            \"200\": {\n                \"description\": \"HTML template for documentation\",\n                \"content\": {\n                    \"text/html\": {\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}</pb-code-highlight>\n      <p class=\"tei-para\">This handles the server-side routing of requests. However, there's also a client-side aspect, which we'll cover in the next chapter.</p>\n    </pb-observable></div></pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}