{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.11.17.11",
    "rootNode": "3.11.17.11",
    "id": "pm-extensions-templates",
    "odd": "docbook.odd",
    "next": "3.11.17.11.11",
    "previous": "3.11.17.9",
    "nextId": "pb-template",
    "previousId": "external-parameters",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"pm-extensions-templates\"><pb-observable data=\"3.11.17.11,3.11.17.11\" emit=\"transcription\"><h3 class=\"tei-title6 title\">Code Templates and Custom Behaviours</h3><p class=\"tei-para\">The two dozen behaviours defined by the TEI processing model are enough to cover\n          most standard HTML output tasks like a listItem or heading, but more complex HTML markup or even other output formats like LaTeX require more\n          customization and control over the generated output. The TEI Publisher library thus\n          extends the processing model syntax with two custom elements for defining code\n          templates.</p><p class=\"tei-para\">While TEI Publisher does provide ways to write your own behaviours in XQuery and\n            thus extend the ones defined in the guidelines, this should only be used as last resort:\n            custom XQuery behaviours limit the portability of the ODD and are bad for\n            maintenance.</p><p class=\"tei-para\">\n          Avoiding custom behaviours works quite well for HTML output and we have realized\n            complex projects with just two or three extension behaviours. Things start to become\n            more difficult if you try to output LaTeX though: there are hundreds of packages to use,\n            and users typically define their own macros or environments for all recurring\n            typesetting tasks. For example, to print a TEI\n          <span class=\"tei-tag code\">persName</span>\n          , experienced LaTeX\n            users would normally create a corresponding\n          <span class=\"tei-code2 code\">\\persName</span>\n          macro and handle the\n            formatting details there. Unfortunately, out of the box the TEI processing model does\n            not facilitate this level of customization.\n        </p></pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}