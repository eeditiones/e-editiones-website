{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.20.7",
    "rootNode": "3.20.7",
    "id": "client-side-urls",
    "odd": "docbook.odd",
    "next": "3.22",
    "previous": "3.20",
    "nextId": "i18n",
    "previousId": "url-routing",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"client-side-urls\"><pb-observable data=\"3.20.7,3.20.7\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Adjusting the client-side URL handling</h2>\n      <p class=\"tei-para\">With the two routes we set up for the documentation in the previous section, we cover the cases in which the entire page is loaded or reloaded by the browser, either by following a link, selecting a bookmark or pasting an URL into the location bar. However, TEI Publisher is a highly dynamic application and users can interact with the page without reloading it, e.g. by navigating to the next page of the document, selecting a toggle, clickling a link in the table of contents etc. Client-side interactions like this also need to be recorded and should be reflected in the URL, so users can copy or bookmark it. And the bookmarked link should later reconstitute the page in the state it was in when the bookmark was created.</p>\n      <p class=\"tei-para\">All client-side web components in TEI Publisher therefore use a central state registry to track their state and reflect it in the URL. You can see this in action when you open any of the larger sample documents and navigate between its pages using the navigation buttons: the URL shown in the browser's location bar will change. For simple documents like <a href=\"/../test/kant_rvernunft_1781.TEI-P5.xml\" class=\"tei-link4\" target=\"_new\">Kant's Kritik</a>, the current page displayed will be encoded in the <span class=\"tei-parameter code\">root</span> parameter. If the divisions or pages to navigate by have an <span class=\"tei-code2 code\">xml:id</span>, this will be used instead and placed into the <span class=\"tei-parameter code\">id</span> parameter. The path to the TEI document is also tracked (it's the <span class=\"tei-code2 code\">test/kant_rvernunft_1781.TEI-P5.xml</span> part of the URL), though you won't see it change while navigating.</p>\n      <p class=\"tei-para\">For the documentation we deviate from this default pattern with the relative URL becoming <span class=\"tei-code2 code\">documentation/{id}</span>. We thus need to inform the client-side components about the change, so they know how to store their state into the URL. The central <span class=\"tei-tag code\">pb-page</span> component provides two attributes for this:</p>\n      <dl><dt>url-template</dt><dd>\n            <p class=\"tei-para\">A template expression containing placeholders for the parameters to be filled in. The template uses the same syntax and library as the popular <a href=\"https://expressjs.com/en/guide/routing.html#route-paths\" class=\"tei-link4\" target=\"_new\">Express javascript framework</a>.</p>\n          </dd><dt>url-ignore</dt><dd>\n            <p class=\"tei-para\">A comma-separated list of parameter names which should <span class=\"tei-emphasis2\">not</span> be reflected in the URL.</p>\n          </dd></dl>\n      <p class=\"tei-para\">The expression passed to url-template may reference any of the default parameters known to TEI Publisher components, in particular <span class=\"tei-parameter code\">path</span>, <span class=\"tei-parameter code\">odd</span>, <span class=\"tei-parameter code\">view</span> or <span class=\"tei-parameter code\">id</span>. Additionally, any parameter supplied to a <span class=\"tei-tag code\">pb-view</span> via the <span class=\"tei-tag code\">pb-param</span> element can be referenced. Just have a look at the constructed URLs in the browser to see which parameters are being tracked for a specific page. Within TEI Publisher, URL templates will usually be rather simple. For the full syntax supported check the underlying <a href=\"https://www.npmjs.com/package/path-to-regexp\" class=\"tei-link4\" target=\"_new\">javascript library</a>.</p>\n      <p class=\"tei-para\">To handle the URL for the documentation example, we set the URL template to <span class=\"tei-code2 code\">documentation/:id?</span>. This injects the <span class=\"tei--element\">id</span> parameter as part of the path, e.g. <span class=\"tei-code2 code\">/documentation/api</span>. The ? after the parameter indicates that it is optional. We also do not want the <span class=\"tei-code2 code\">path</span> to the document to appear anywhere (it is always the same in the case), so we add it to <span class=\"tei-code2 code\">url-ignore</span>. The resulting <span class=\"tei-tag code\">pb-page</span> would thus look as follows:</p>\n      <pb-code-highlight class=\"tei-synopsis4\" language=\"html\">&lt;pb-page url-template=\"documentation/:id?\" url-ignore=\"odd,view,path\" data-template=\"pages:pb-page\" unresolved=\"unresolved\" &gt;</pb-code-highlight>\n        <div class=\"tei-note3 note\"><h4 class=\"tei-title4\">A note on history handling</h4><p class=\"tei-para\">It is important that only one central text component on the page writes and reads the URL. Usually this will be the main <span class=\"tei-tag code\">pb-view</span>. Other components, e.g. for the translation, should be made dependent and restore their state based on the state of the main component. If multiple components write their state, browsing back via the browser history may not work properly, or you may see undesired effects due to conflicting parameters.</p><p class=\"tei-para\">TEI Publisher supports different ways to make one <span class=\"tei-tag code\">pb-view</span> depend on another, e.g. via a mapping function (<span class=\"tei-parameter code\">map</span> attribute). A mapped view will never write to the browser history.</p><p class=\"tei-para\">In other cases, to explicitely prevent a dependent <span class=\"tei-tag code\">pb-view</span> from writing to the URL, use the attribute <span class=\"tei-parameter code\">disable-history</span>. To make a <span class=\"tei-tag code\">pb-view</span> load its contents <span class=\"tei-emphasis2\">after</span> the main text view, set attribute <span class=\"tei-parameter code\">on-update</span> and make sure, the dependent component listens to the event channel written by the main component.</p></div>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}