{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.12.17.15.13",
    "rootNode": "3.12.17.15.13",
    "id": "odd-by-example-advanced",
    "odd": "docbook.odd",
    "next": "3.14",
    "previous": "3.12.17.15",
    "nextId": "css-styling",
    "previousId": "odd-by-example",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"odd-by-example-advanced\"><pb-observable data=\"3.12.17.15.13,3.12.17.15.13\" emit=\"transcription\">\n          <h4 class=\"tei-title7 title\">Advanced Use</h4>\n          <p class=\"tei-para\"> To further tweak the building process you can call the functions of the <span class=\"tei-filename code\">\n            odd-by-example.xql</span> module from your own XQuery code. If you wish to generate\n            your own basis for the comparison you can call the following function to store a\n            compiled ODD in the default odd location of tei-publisher: </p>\n          <pb-code-highlight class=\"tei-programlisting5\" language=\"XQuery\" line-numbers=\"line-numbers\">obe:compile-odd(doc('../odd/my-file.odd'), 'my-file-name')</pb-code-highlight>\n          <div class=\"tei-note3 note\"><h4 class=\"tei-title4\">Note</h4><p class=\"tei-para\"> Due to a bug in the <span class=\"tei-filename code\">odd2odd.xsl</span> stylesheet the output of\n              this function is not always valid. To use it for further processing you need to make\n              sure that only valid documents are used for further processing </p></div>\n          <p class=\"tei-para\">You can also modify the transformation parameters of:</p>\n          <pb-code-highlight class=\"tei-programlisting5\" language=\"XQuery\" line-numbers=\"line-numbers\">obe:process-example(doc('../data/test/myTEI.xml'), 'odd-name', 'simplePrint')</pb-code-highlight>\n          <p class=\"tei-para\">The above example uses simplePrint as a basis for building the new ODD. The full\n            list of configurable options are:</p>\n          <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">&lt;parameters&gt;\n  &lt;!-- the document corpus --&gt;\n  &lt;param name=\"corpus\" value=\".\"/&gt;\n  &lt;!-- name of odd --&gt;\n  &lt;param name=\"schema\" value=\"{substring-before($output, '.odd')}\"/&gt;\n  &lt;!-- the source of the TEI (just needs *Spec)--&gt;\n  &lt;param name=\"defaultSource\" value=\"{$base}\"/&gt;\n  &lt;!-- should we make valList for @rend and @rendition --&gt;\n  &lt;param name=\"enumerateRend\" value=\"false\"/&gt;\n  &lt;!-- whether to do all the global attributes --&gt;\n  &lt;param name=\"keepGlobals\" value=\"true\"/&gt;\n  &lt;!-- should elements in teiHeader be included?--&gt;\n  &lt;param name=\"includeHeader\" value=\"true\"/&gt;\n  &lt;!-- should we make valList for @type --&gt;\n  &lt;param name=\"enumerateType\" value=\"true\"/&gt;\n  &lt;!-- should we deal with non-TEI namespaces --&gt;\n  &lt;param name=\"processNonTEI\" value=\"false\"/&gt;\n  &lt;!-- do you want moduleRef generated with @include or @except? --&gt;\n  &lt;!-- seems broken see https://github.com/TEIC/Stylesheets/issues/212 --&gt;\n  &lt;param name=\"method\" value=\"include\"/&gt;\n  &lt;!-- turn on debug messages --&gt;\n  &lt;param name=\"debug\" value=\"false\"/&gt;\n  &lt;!-- turn on messages --&gt;\n  &lt;param name=\"verbose\" value=\"false\"/&gt;\n  &lt;!-- which files to look at? provide suffix --&gt;\n  &lt;param name=\"suffix\" value=\"xml\"/&gt;\n  &lt;!-- should P4 files be considered? --&gt;\n  &lt;param name=\"processP4\" value=\"false\"/&gt;\n  &lt;!-- should P5 files be considered? --&gt;\n  &lt;param name=\"processP5\" value=\"true\"/&gt;\n&lt;/parameters&gt;\n          </pb-code-highlight>\n        </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}