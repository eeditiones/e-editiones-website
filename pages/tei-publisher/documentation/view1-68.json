{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.16.9",
    "rootNode": "3.16.9",
    "id": "webcomponents-intro",
    "odd": "docbook.odd",
    "next": "3.16.11",
    "previous": "3.16",
    "nextId": "webcomponents-docs",
    "previousId": "webcomponents",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section3\" id=\"webcomponents-intro\"><pb-observable data=\"3.16.9,3.16.9\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">Web Components</h2>\n\n\n      <p class=\"tei-para\">\n        The technology enabling this Lego-like modular approach is a W3C standard called\n        <span class=\"tei-emphasis2\">Web Components</span>\n        . It is already built into many browsers and support\n          is improving quickly, reducing the need for external frameworks. There's a growing\n          collection of ready-to-use components available, e.g. the\n        <a href=\"https://www.webcomponents.org/author/PolymerElements\" class=\"tei-link4\" target=\"_new\">Polymer\n            elements</a>\n        we use for menus, buttons, dropdowns etc. TEI Publisher from version 6.0\n          exposes its collection of Web Components targeted at creating digital editions as a\n          separate\n        <span class=\"tei-code2 code\">pb-components</span>\n        package.\n      </p>\n      <p class=\"tei-para\">\n        You do not need to know much about\n        <span class=\"tei-emphasis2\">Web Components</span>\n        to use them in\n          TEI Publisher. From a user perspective, a component looks like any other HTML element. You\n          configure it by setting its properties via attributes. For example, the following HTML\n          code snippet will display the first page/section of two completely different documents as\n          you can see below in the embedded\n        <a href=\"https://codepen.io/\" class=\"tei-link4\" target=\"_new\">Codepen</a>\n        (to learn more on embedding Publisher output and components see\n        <a href=\"/?odd=docbook.odd&amp;view=div&amp;id=embedding\" class=\"tei-link3\" target=\"\">further chapters</a>\n        )\n      </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"xml\" line-numbers=\"line-numbers\">\n&lt;pb-page&gt;\n  &lt;pb-document id=\"document1\" path=\"test/kant_rvernunft_1781.TEI-P5.xml\" odd=\"dta\" view=\"page\"&gt;&lt;/pb-document&gt;\n  &lt;pb-document id=\"document2\" path=\"doc/documentation.xml\" odd=\"docbook\" view=\"div\"&gt;&lt;/pb-document&gt;\n\n  &lt;!-- Display two document views side by side --&gt;\n  &lt;main&gt;\n      &lt;pb-view id=\"view1\" src=\"document1\"&gt;&lt;/pb-view&gt;\n      &lt;pb-view id=\"view2\" src=\"document2\"&gt;&lt;/pb-view&gt;\n  &lt;/main&gt;\n&lt;/pb-page&gt;</pb-code-highlight>\n\n      <pb-codepen class=\"tei-programlisting3\" hash=\"WNvYYWB\" user=\"wolfgangmm\" theme=\"dark\" height=\"480\" editable=\"editable\"></pb-codepen>\n      <p class=\"tei-para\">\n        <span class=\"tei-tag code\">pb-page</span>\n        ,\n        <span class=\"tei-tag code\">pb-document</span>\n        and\n        <span class=\"tei-tag code\">pb-view</span>\n        are three web\n          components from\n        <span class=\"tei-code2 code\">pb-components</span>\n        library, while\n        <span class=\"tei-tag code\">main</span>\n        is a standard\n          HTML5 tag. The name of the custom element\n        <span class=\"tei-emphasis1\">must</span>\n        start with\n          a prefix to distinguish it from standard HTML. This concept should be familiar to XML\n          people. For TEI Publisher components, the prefix is always\n        <span class=\"tei-code2 code\">pb-</span>\n        . Components\n          from other sources will use different prefixes, e.g.\n        <span class=\"tei-code2 code\">paper-</span>\n        and\n        <span class=\"tei-code2 code\">iron-</span>\n        for the\n        <span class=\"tei-emphasis2\">Polymer</span>\n        collection.\n      </p>\n      <p class=\"tei-para\">\n        The part of the page which uses TEI Publisher web components should always be wrapped\n          into an\n        <span class=\"tei-tag code\">pb-page</span>\n        element. This element determines the TEI Publisher server\n          instance all other components will be communicating with (see the next section below). It\n          is also responsible for some other initialization steps, e.g. loading the list of\n          available user interface translations. .\n      </p>\n      <p class=\"tei-para\">\n        <span class=\"tei-tag code\">pb-document</span>\n        specifies a document source, which can then be referenced by id\n          from other components. The component provides a way to configure basic properties\n          governing document's default rendering, like associated ODD file, etc. In the example\n          above, we define three properties for each document:\n      </p>\n      <dl><dt>path</dt><dd>\n            <p class=\"tei-para\">\n              the relative path to the XML document. This will be interpreted as relative to\n                the\n              <span class=\"tei-emphasis2\">data root collection</span>\n              of TEI Publisher, by default pointing\n                to the\n              <span class=\"tei-filename code\">data</span>\n              collection within the TEI Publisher app.\n            </p>\n          </dd></dl>\n      <dl><dt>odd</dt><dd>\n            <p class=\"tei-para\">\n              the name - without suffix - of the ODD to use for rendering the document. In the\n                example, the first document is encoded in TEI and thus transformed through\n              <span class=\"tei-filename code\">dta.odd</span>\n              , while the second is written in DocBook and passed\n                through\n              <span class=\"tei-filename code\">docbook.odd</span>\n              .\n            </p>\n          </dd></dl>\n      <dl><dt>view</dt><dd>\n            <p class=\"tei-para\">this property determines how the document will be paginated if the user\n                navigates forward/backward. Currently three possible methods are available:</p>\n            <ol class=\"tei-orderedlist\"><li class=\"tei-listitem\">\n                <p class=\"tei-para\">\n                  <span class=\"tei-parameter code\">div</span>\n                  : displays one structural division (TEI div, DocBook\n                    section â€¦) at a time\n                </p>\n              </li><li class=\"tei-listitem\">\n                <p class=\"tei-para\">\n                  <span class=\"tei-parameter code\">page</span>\n                  : displays the document page by page. This requires\n                    page break indicators to be present (\n                  <span class=\"tei-tag code\">pb</span>\n                  in TEI, not supported for\n                    docbook).\n                </p>\n              </li><li class=\"tei-listitem\">\n                <p class=\"tei-para\">\n                  <span class=\"tei-parameter code\">single</span>\n                  : the entire document (or a selected fragment of\n                    it) is displayed at once\n                </p>\n              </li></ol>\n          </dd></dl>\n      <p class=\"tei-para\">\n        <span class=\"tei-tag code\">pb-view</span>\n        is the critical component in TEI Publisher: it provides the actual text\n          view by transforming a part or entirety of the source XML into HTML based on the\n          processing model instructions in the ODD.\n      </p>\n\n      <p class=\"tei-para\">\n        Because webcomponents are all about encapsulation,\n        <span class=\"tei-tag code\">pb-view</span>\n        ensures that the\n          styling of the text as governed by the ODD will be confined to the boundaries of the\n          component. This makes it possible to display two completely heterogenous texts (like the\n          documentation and Kant's Kritik) on the same page without styles contaminating each other.\n          As a downside, encapsulation also poses some challenges, which we discussed in the section\n          about\n        <a href=\"/?odd=docbook.odd&amp;view=div&amp;id=external-css\" class=\"tei-link3\" target=\"\">CSS styling</a>\n        .\n      </p>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}