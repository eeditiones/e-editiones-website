{
    "format": "json",
    "view": "div",
    "doc": "documentation.xml",
    "root": "3.34.25",
    "rootNode": "3.34.25",
    "id": "custom-components-clipboard",
    "odd": "docbook.odd",
    "next": "3.34.27",
    "previous": "3.34",
    "nextId": "custom-components-testing",
    "previousId": "custom-components",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><div class=\"tei-section4\" id=\"custom-components-clipboard\"><pb-observable data=\"3.34.25,3.34.25\" emit=\"transcription\">\n      <h2 class=\"tei-title7 title\">pb-clipboard example</h2>\n      <p class=\"tei-para\"> We will discuss the details of the <span class=\"tei-tag code\">pb-clipboard</span> element to illustrate some\n        basic concepts. You will find exact code of this example in <span class=\"tei-code2 code\">\n          pb-extension-template/src/pb-clipboard.js</span>. Each custom component has a defined API:\n        an interface it presents to the outside world. It includes properties, methods (also called\n        functions) and events but it bundles HTML markup along with local CSS and JavaScript into a\n        single file. </p>\n      <p class=\"tei-para\"> Our example is a custom element designed to provide simple\n          <span class=\"tei-emphasis2\">copy-to-clipboard</span> functionality, helpful e.g. when providing\n        ready-made citation on a page. It consists of three parts: a label, the content to be copied\n        and a button to copy. </p>\n      <p class=\"tei-para\">Thus, render function which actually displays this custom component could look like\n        this:</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\n    render() {\n        return html`\n            &lt;h3&gt;${translate(this.label)}&lt;/h3&gt;\n            &lt;div&gt;\n                &lt;slot&gt;&lt;/slot&gt;\n                &lt;paper-icon-button icon=\"icons:content-copy\" @click=\"${this._copy}\"\n                    title=\"${translate('clipboard.copy')}\"&gt;&lt;/paper-icon-button&gt;\n            &lt;/div&gt;\n        `;\n    }\n      </pb-code-highlight>\n      <p class=\"tei-para\"> You will note that the render function uses not only regular HTML elements like\n          <span class=\"tei-tag code\">h3</span> or <span class=\"tei-tag code\">div</span> but also components from the <span class=\"tei-code2 code\">paper-</span> package.\n        To be able to use them, we need to explicitly import them. Same is true for\n          <span class=\"tei-code2 code\">LitElement</span> class itself and important interface from the\n          <span class=\"tei-code2 code\">pb-components</span> package: <span class=\"tei-code2 code\">pbMixin</span>. </p>\n      <p class=\"tei-para\"> All user interface components may need to be localized. For that reason we also import\n          <span class=\"tei-code2 code\"> translate</span> method from TEI Publisher's <span class=\"tei-code2 code\">i18n</span> module. </p>\n      <p class=\"tei-para\">\n        <span class=\"tei-code2 code\">LitElement</span> and <span class=\"tei-code2 code\">pbMixin</span> must be imported for all custom components\n        extending <span class=\"tei-code2 code\">pb-components</span>. Code listing below demonstrates how to correctly\n        import all classes and custom elements required as well as how to create a class signature\n        that extends <span class=\"tei-code2 code\">pbMixin</span>. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\nimport { LitElement, html, css } from 'lit-element';\nimport { pbMixin } from '@teipublisher/pb-components/src/pb-mixin';\nimport { translate } from \"@teipublisher/pb-components/src/pb-i18n\";\nimport '@polymer/paper-icon-button';\nimport '@polymer/iron-icons';\n\n/**\n * A component with a button which copies the contained content to the clipboard.\n * Use for the typical 'quote this content as' hints on a webpage.\n * \n * @slot content - contains the actual content to copy to the clipboard\n */\nexport class PbClipboard extends pbMixin(LitElement) {\n      </pb-code-highlight>\n\n      <p class=\"tei-para\"> Imports and render function sorted, there are two other static functions we need to\n        take care of: <span class=\"tei-function code\">properties</span> and <span class=\"tei-function code\">styles</span>. <span class=\"tei-code2 code\">\n          pb-clipboard</span> has just a single property: the label to display above the copy text.\n        Nevertheless it needs to explicitly declare properties inherited from pbMixin which is done\n        via <span class=\"tei-code2 code\">...super.properties</span> notation. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\nstatic get properties() {\n        return {\n            /**\n             * Label to display above the text to be copied\n             */\n            label: {\n                type: String\n            },\n            ...super.properties\n        };\n    }\n      </pb-code-highlight>\n\n      <p class=\"tei-para\"> You probably noticed that the button we added in the <span class=\"tei-function code\">render</span>\n        function specifies what to do upon click event via <span class=\"tei-code2 code\">click</span> attribute: <span class=\"tei-code2 code\">\n          @click=\"${this._copy}\"</span>. A protected <span class=\"tei-function code\">_copy</span> function of the\n        element is called in such case and for our simple <span class=\"tei-code2 code\">pb-clipboard</span> element it\n        provides its core <span class=\"tei-emphasis2\">copy-to-clipboard</span> functionality. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\n/**\n* Copy text content from the &lt;slot&gt; to the clipboard\n*/\n\n    _copy() {\n        const slot = this.shadowRoot.querySelector('slot');\n        \n        // first import nodes from the slot into a temporary div\n        const content = document.createElement('div');\n        slot.assignedNodes().forEach((node) =&gt; {\n            content.appendChild(document.importNode(node, true));\n        });\n        \n        // copy the innerText of the temp div into the clipboard\n        navigator.clipboard.writeText(content.innerText);\n    }\n      </pb-code-highlight>\n\n      <p class=\"tei-para\"> We glanced over yet another interesting function invoked in the <span class=\"tei-code2 code\">render</span>\n        method. <span class=\"tei-code2 code\">translate</span>, which accepts as an argument a key identifying a\n        corresponding label in i18n language files. It could be one of keys shipping with TEI\n        Publisher, but here, for a new component we need a more specific label, presenting the user\n        with a short, informative text to be displayed when hovering over <span class=\"tei-emphasis2\">\n          copy-to-clipboard</span> button. Obviously, the label should change in line with the\n        language setting for the whole application, which is why we need the i18n module in the\n        first place. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\n        title=\"${translate('clipboard.copy')}\"\n      </pb-code-highlight>\n      <p class=\"tei-para\"> Please refer to the chapter on <a href=\"/?odd=docbook.odd&amp;view=div&amp;id=i18n\" class=\"tei-link3\" target=\"\">i18n</a> for in-depth discussion\n        of the subject. Here we'll just mention that additional language files for new components\n        should be placed in <span class=\"tei-filename code\">i18n/app</span>, mimicking the location and format of\n        Publisher. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\n{\n  \"clipboard\": {\n     \"label\": \"Quote  as:\",\n     \"copy\": \"Click to copy to clipboard\"\n  }\n}\n      </pb-code-highlight>\n      <p class=\"tei-para\">And one last job is a little bit of styling to make things pretty.</p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\nstatic get styles() {\n        return css`\n            :host {\n                display: block;\n            }\n            h3 {\n                margin: 0;\n                font-size: .85em;\n                font-weight: normal;\n                color: #3a3a3a;\n            }\n            div {\n                display: flex;\n                align-items: center;\n                padding: 0 16px;\n            }\n        `;\n    }\n      </pb-code-highlight>\n      <p class=\"tei-para\"> The final directive at the very bottom of <span class=\"tei-filename code\">pb-clipboard.js</span> is\n        necessary to register the custom element with the browser. </p>\n      <pb-code-highlight class=\"tei-programlisting5\" language=\"js\">\n        customElements.define('pb-clipboard', PbClipboard);\n      </pb-code-highlight>\n    </pb-observable></div></div></body></html>",
    "footnotes": "",
    "userParams": {
        "webcomponents": 7
    },
    "collection": "doc"
}